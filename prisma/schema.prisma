// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id                String   @id @default(cuid())
  sessionToken      String   @unique
  userId            String
  expires           DateTime
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String  @id @default(cuid())
  name              String?
  email             String? @unique
  avatar            String?
  image             String?
  emailVerified     DateTime?
  accounts Account[]
  sessions Session[]
  groups Group[]
  creator Item[]
}

model VerificationToken {
  identifier        String
  token             String  @unique
  expires           DateTime

  @@unique([identifier, token])
}


model Group {
  id              String @id @default(cuid())
  name            String
  image           String?
  description     String? @db.VarChar(250)
  recipients      Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  creator User    @relation(fields: [creatorId], references: [id])
  creatorId       String
  items Item[]
}

model Item {
  id              Int @id @default(autoincrement())
  name            String
  image           String?
  description     String? @db.VarChar(250)
  qrCodeImage     String?
  quantity        Int
  condition      String?
  status          String?
  statusDescription String? @db.VarChar(250)
  availability    Boolean?
  serialNumber    String?
  brand           String?
  parent Group    @relation(fields: [groupId], references: [id])
  groupId         String
  createdBy User  @relation(fields: [createdById], references: [id])
  createdById     String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}